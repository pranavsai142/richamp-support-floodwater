#!/bin/bash
##SBATCH --constraint=hatteras
#SBATCH --job-name=pst_init
#SBATCH --output=uri_post_init.out
#SBATCH --error=uri_post_init.err
##SBATCH -p lowpri
#SBATCH -p uri-cpu
#SBATCH -c 1
#SBATCH --mem=16G
#SBATCH -t 08:00:00
##SBATCH --reservation=richamp
##SBATCH --partition=uri-richamp
#SBATCH --mail-user=pranav.sai@uri.edu
#SBATCH --mail-type=END

# METGET_API_KEY and METGET_ENDPOINT environment variables must be set in order for
# get_metget_data.py to succeed

targetScript="richamp_scale_and_subset_post_init.scr"
logfile=$1  # first parameter passed from richamp_scale_and_subset_post_init.sh
echo "\"start\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.start # <-OVERWRITE
echo "[$(date +'%Y-%h-%d-T%H:%M:%S%z')] The batch job for $targetScript has started." >> $logfile

# Clear working directories
rm -rf graphs properties
cd $POSTHOME

indir=$RICHAMP_INDIR
postprocessdir=$POSTHOME

# Comment out line to generate run properties if running scenario wind.
# Create run.properties file manually
python3 $postprocessdir/generateRunProperties.py --indir $indir
while read line; do 
if [[ $line =~ "rawstart" ]]; then
    t_start=$line
elif [[ $line =~ "rawend" ]]; then
    t_end=$line
elif [[ $line =~ "track" ]]; then
    trackstr=$line
fi
done < properties/run.properties
echo "$t_start"
echo "$t_end"
start=${t_start:10:17}
end=${t_end:8:17}
echo "$start"
echo "$end"
echo "$trackstr"
if [[ $trackstr != "" ]]; then
    track=${trackstr:8:${#trackstr}-1}
    echo "$track"
fi
#Manually define start and end date for scenario wind
#start="2012-10-27 00:00"
#end="2012-11-01 00:00"
# 

wind_filename=$SCENARIO_WIND
wind_format="owi-ascii"
#wind_format="owi-306"
parametric=""
    
if [[ $TC_FORCING == "True" ]]; then
    cp $RICHAMP_INDIR/*.trk $postprocessdir/nhc.trk
    python3 $postprocessdir/generateParametricInput.py --track $postprocessdir/nhc.trk
    track_only=1 # set to 0 and uncomment the rest of the code in this block to run with the parametric model
    module load matlab/r2021b
    matlab -nodesktop -nodisplay -nosplash -r "addpath $postprocessdir, try, ASGS_fort22_to_PWM_inputs $track_only, catch me, fprintf('%s / %s\n',me.identifier,me.message), end, exit"
    mv Track.shp Track.shx Track.dbf track.richamp properties/.
    #ln -s $postprocessdir/diag_parm.nml diag_parm.nml
    $postprocessdir/windgfdl
    wind_param=richamp.wnd
    wind_inp=Wind_Inp.txt
    wind_format="wnd"
else
    rain_filename=RICHAMP_rain
    #metget build --domain gfs 0.1 -72 41 -71 43 --start "$start" --end "$end" --timestep 3600 --output $rain_filename --multiple-forecasts --format generic-netcdf --variable rain
    
    metget build --domain gfs 0.1 -72 40 -70 43 --start "$start" --end "$end" --timestep 3600 --output $rain_filename --multiple-forecasts --format generic-netcdf --variable rain
    
    
    wind_filename=gfs_wind
    metget build --domain gfs 0.1 -72 40 -70 43 --start "$start" --end "$end" --timestep 3600 --output $wind_filename --multiple-forecasts --format generic-netcdf --variable wind_pressure
    
    wind_format="generic-netcdf"
fi

if [[ $PARAMETRIC_WIND == "True" ]]; then
    parametric="-parametric true"
fi

# TODO: Integrate parametric wind and rain generation as an alternative to metget
# If/else block. If forecasting using NHC, then generate parametric wind and rain,
# otherwise call metget for wind and rain. Then postprocess the wind file and deliver.
# The scale_and_subset script will probably need an additional boolean to toggle the uniform roughness


# call python script to trim wind, interpolate to RICHAMP region of interest, and scale based on z0
output=RICHAMP_wind
highres_roughness=$postprocessdir/NLCD_z0_RICHAMP_Reg_Grid.nc
wind_roughness=$postprocessdir/gfs-roughness.nc
z0_interp_name=$postprocessdir/z0_interp
threads=3 # $threads + wasync = the number in the header after -c
sigma=1000
radius=3000
z0_sv=""
#z0_sv='-z0sv'
scale_logic=up-down

#skip scale_and_subset
#wind_format=none
if [ $wind_format == "wnd" ]; then
    echo python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_param -wfmt $wind_format -winp $wind_inp -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
else
    echo python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_filename -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync $parametric
fi
if [ $wind_format == "owi-306" ]; then
	python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_filename -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync $parametric
elif [ $wind_format == "owi-ascii" ]; then
   python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_filename -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync $parametric
elif [ $wind_format == "generic-netcdf" ]; then
   python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_filename.nc -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync $parametric
elif [ $wind_format == "wnd" ]; then
  python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_param -wfmt $wind_format -winp $wind_inp -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#elif [ $wind_format == "blend" ]; then
#   python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_param -wfmt "wnd" -winp $wind_inp -wback $wind_back -wbackfmt "owi-ascii" -wbackr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
fi

graphAdcirc=""
graphGfs=""
graphRain=""
graphPost=""
graphObs=""
graphWaves=""
graphWater=""

if [[ $GRAPH_ADCIRC == "True" ]]; then
    graphAdcirc="--adcircExists true --wind $RICHAMP_INDIR/fort.74.nc"
fi
if [[ $GRAPH_GFS == "True" ]]; then
    graphGfs="--gfsExists true --wind $wind_filename.nc"
fi
if [[ $GRAPH_RAIN == "True" ]]; then
    graphRain="--rainExists true --rain $rain_filename.nc"
fi
if [[ $GRAPH_POST == "True" ]]; then
    graphPost="--postExists true --wind $output.nc"
fi
if [[ $GRAPH_OBS == "True" ]]; then
    graphObs="--obsExists true"
fi
if [[ $GRAPH_WAVES == "True" ]]; then
    graphWaves="--wavesExists true --waveswh $RICHAMP_INDIR/swan_HS.63.nc"
fi
if [[ $GRAPH_WATER == "True" ]]; then
    graphWater="--waterExists true --water $RICHAMP_INDIR/fort.63.nc"
fi
echo python3 $postprocessdir/generateGraphs.py --backgroundChoice $BACKGROUND_CHOICE --stations $WIND_STATIONS $graphAdcirc $graphGfs $graphRain $graphPost $graphObs $graphWaves $graphWater
python3 $postprocessdir/generateGraphs.py --backgroundChoice $BACKGROUND_CHOICE --stations $WIND_STATIONS $graphAdcirc $graphGfs $graphRain $graphPost $graphObs $graphWaves $graphWater


# richamp_scale_and_subset.scr


# load run.properties file into associative array and extract relevant properties
#declare -A properties
#RUNPROPERTIES=run.properties #PWD should be the SCENARIODIR
#SCRIPTDIR=`sed -n 's/[ ^]*$//;s/path.scriptdir\s*:\s*//p' $RUNPROPERTIES`
#source $SCRIPTDIR/properties.sh
#loadProperties $RUNPROPERTIES
forcing=GFS
if [[ $TC_FORCING == "True" ]]; then
   forcing=NHC
fi

# call Matlab scripts to trim depth data to RICHAMP region of interest and to generate a simple max inundation plot
indir=$RICHAMP_INDIR/
#indir=/project/pi_iginis_uri_edu/pranav_sai_uri_edu/ecflow_output/ricv1/forecast_ensemble/forecast_base/ADCIRC/simulation/  # Matlab script expects trailing slashes
outdir=./
postprocessdir=$POSTHOME
nc_rough=$postprocessdir/NLCD_z0_RICHAMP_Reg_Grid.nc
module load matlab/r2021b
if [[ "$SCENARIO_WIND" != "" ]]; then
    cp $RICHAMP_INDIR/fort.63.nc $POSTHOME/RICHAMP_fort63.nc
    matlab -nodesktop -nodisplay -nosplash -r "addpath $postprocessdir, try, plot_max_inundation $indir $outdir $nc_rough $track $forcing, catch me, fprintf('%s / %s\n',me.identifier,me.message), end, exit"
else
    matlab -nodesktop -nodisplay -nosplash -r "addpath $postprocessdir, try, subset_fort63_richamp $indir $outdir, plot_max_inundation $indir $outdir $nc_rough $track $forcing, catch me, fprintf('%s / %s\n',me.identifier,me.message), end, exit"
fi
module purge
module load matlab/r2021a
matlab -nodisplay -nosplash -nodesktop -singleCompThread -r "run('Plot_Eonly_asgs.m');exit;"

# move files to a consistent location for dashboarding team 
water_output=RICHAMP_fort63.nc
max_inund_plot=RICHAMP_max_inundation.png
wind_output=$output.nc
rain_output=$rain_filename.nc
output_dir=$RICHAMP_OUTDIR
cp $wind_output $rain_output $water_output $max_inund_plot $output_dir
#copy wave output
if [[ $GRAPH_WAVES == "True" ]]; then
    wave_output=$RICHAMP_INDIR/swan_HS.63.nc
    cp $wave_output $output_dir
    mv $output_dir/$wave_output $output_dir/RICHAMP_wave.nc
fi

rm -rf $output_dir/properties $output_dir/graphs
cp -r properties $output_dir
cp -r graphs $output_dir
#cp $indir/*.trk $output_dir

echo "\"finish\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.finish # <-OVERWRITE
echo "[$(date +'%Y-%h-%d-T%H:%M:%S%z')] The batch job for $targetScript has finished." >> $logfile

