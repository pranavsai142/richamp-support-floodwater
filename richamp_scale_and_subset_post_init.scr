#!/bin/bash
##SBATCH --constraint=hatteras
#SBATCH --job-name=pst_init
#SBATCH --output=uri_post_init.out
#SBATCH --error=uri_post_init.err
##SBATCH -p lowpri
#SBATCH -p uri-cpu
#SBATCH -c 4
#SBATCH --mem=16G
#SBATCH -t 08:00:00
##SBATCH --reservation=richamp
##SBATCH --partition=uri-richamp

# METGET_API_KEY and METGET_ENDPOINT environment variables must be set in order for
# get_metget_data.py to succeed

targetScript="richamp_scale_and_subset_post_init.scr"
logfile=$1  # first parameter passed from richamp_scale_and_subset_post_init.sh
echo "\"start\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.start # <-OVERWRITE
echo "[$(date +'%Y-%h-%d-T%H:%M:%S%z')] The batch job for $targetScript has started." >> $logfile

# load run.properties file into associative array and extract relevant properties
#declare -A properties
#RUNPROPERTIES=run.properties #PWD should be the SCENARIODIR
#SCRIPTDIR=`sed -n 's/[ ^]*$//;s/path.scriptdir\s*:\s*//p' $RUNPROPERTIES`
#source $SCRIPTDIR/properties.sh
#loadProperties $RUNPROPERTIES
tc_forcing=$RICHAMP_TC_FORCING
#RSSSITE=${properties['forcing.tropicalcyclone.forecast.rsssite']} # Ditto
#FDIR=${properties['forcing.tropicalcyclone.forecast.path.fdir']} # Ditto
#ADVISDIR=${properties['asgs.path.advisdir']} # Ditto
#indir=/project/pi_iginis_uri_edu/pranav_sai_uri_edu/ecflow_output/ricv1/forecast_ensemble/forecast_base/ADCIRC/simulation
indir=$RICHAMP_INDIR
postprocessdir=/home/pranav_sai_uri_edu/projects/richamp-support-floodwater

# if TROPICALCYCLONE=on, call MetGet to get winds
# if all commented code were to be uncommented, the logic becomes: if TROPICALCYCLONE=on, call URI parametric model and MetGet to get winds; attempt to blend them, but fall back to one or the other if necessary
if [ $tc_forcing == "on" ]; then
#   # run URI parametric model
   track_only=1 # set to 0 and uncomment the rest of the code in this block to run with the parametric model
   module load matlab/r2021b
   matlab -nodesktop -nodisplay -nosplash -r "addpath $postprocessdir, try, ASGS_fort22_to_PWM_inputs $track_only, catch me, fprintf('%s / %s\n',me.identifier,me.message), end, exit"
#   ln -s $postprocessdir/diag_parm.nml diag_parm.nml
#   $postprocessdir/windgfdl
#   wind_param=richamp.wnd
#   wind_inp=Wind_Inp.txt
   # call MetGet
   wind_back_filename=gfs_forecast
   python3 $postprocessdir/get_metget_data.py --domain gfs 0.25 -72 41 -71 43 --start "$t_start" --end "$t_end" --timestep 3600 --output $wind_back_filename --multiple_forecasts --format owi-ascii --variable wind_pressure
   wind_back=$wind_back_filename\_00.wnd
#   # determine wind format based on available files
#   if [[ ! -r "$wind_param" || ! -r "$wind_inp" ]] && [[ -r "$wind_back" ]]; then
      wind_format="owi-ascii"
#   elif [[ -r "$wind_param" && -r "$wind_inp" ]] && [[ ! -r "$wind_back" ]]; then
#      wind_format="wnd"
#   elif [[ -r "$wind_param" && -r "$wind_inp" ]] && [[ -r "$wind_back" ]]; then
#      wind_format="blend"
#   fi
fi

python3 $postprocessdir/generateRunProperties.py --tc $tc_forcing --indir $indir
while read line; do 
	if [[ $line =~ "metgetstart" ]]; then
	  t_start=$line
	elif [[ $line =~ "metgetend" ]]; then
          t_end=$line
        fi
done < run.properties
echo "$t_start"
echo "$t_end"
start=${t_start:13:17}
end=${t_end:11:17}
echo "$start"
echo "$end"
# call MetGet again for precipitation
precip_filename=RICHAMP_rain
#metget build --domain gfs 0.25 -72 41 -71 43 --start "$start" --end "$end" --timestep 3600 --output $precip_filename --multiple-forecasts --format hec-netcdf --variable rain

wind_back_filename=gfs_forecast
#metget build --domain gfs 0.25 -72 41 -71 43 --start "$start" --end "$end" --timestep 3600 --output $wind_back_filename --multiple-forecasts --format owi-ascii --variable wind_pressure
wind_back=$wind_back_filename\_00.wnd
wind_format="owi-ascii"

# call python script to trim wind, interpolate to RICHAMP region of interest, and scale based on z0
output=RICHAMP_wind
highres_roughness=$postprocessdir/NLCD_z0_RICHAMP_Reg_Grid.nc
wind_roughness=$postprocessdir/gfs-roughness.nc
z0_interp_name=$postprocessdir/z0_interp
threads=3 # $threads + wasync = the number in the header after -c
sigma=1000
radius=3000
z0_sv=""
#z0_sv='-z0sv'
scale_logic=up-down
echo python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_back -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#if [ $wind_format == "owi-ascii" ]; then
   #python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_back -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#elif [ $wind_format == "wnd" ]; then
#   python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_param -wfmt $wind_format -winp $wind_inp -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#elif [ $wind_format == "blend" ]; then
#   python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_param -wfmt "wnd" -winp $wind_inp -wback $wind_back -wbackfmt "owi-ascii" -wbackr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#fi

module purge
module load matlab/r2021a
matlab -nodisplay -nosplash -nodesktop -singleCompThread -r "run('read_RICHAMP_wind.m');exit;"

# move files to a consistent location for dashboarding team 
wind_output=$output.nc
precip_output=$precip_filename.nc
output_dir=$RICHAMP_OUTDIR
run_properties=run.properties
cp $wind_output $precip_output $run_properties $output_dir
#cp -r *_OUT $output_dir
if [ $tc_forcing == "True" ]; then
   shapefile1='Track.shp'
   shapefile2='Track.shx'
   shapefile3='Track.dbf'
   #if [ $RSSSITE == "filesystem" ]; then
   #   advisory=$FDIR/index-at.xml
   #else
   #   advisory=$ADVISDIR/index-at.xml
   #fi
   #cp $shapefile1 $shapefile2 $shapefile3 $advisory $output_dir
   cp $indir/*.trk $output_dir
fi

echo "\"finish\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.finish # <-OVERWRITE
echo "[$(date +'%Y-%h-%d-T%H:%M:%S%z')] The batch job for $targetScript has finished." >> $logfile

