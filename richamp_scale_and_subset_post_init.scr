#!/bin/bash
##SBATCH --constraint=hatteras
#SBATCH --job-name=pst_init
#SBATCH --output=uri_post_init.out
#SBATCH --error=uri_post_init.err
##SBATCH -p lowpri
#SBATCH -p uri-cpu
#SBATCH -c 4
#SBATCH --mem=16G
#SBATCH -t 08:00:00
##SBATCH --reservation=richamp
##SBATCH --partition=uri-richamp

# METGET_API_KEY and METGET_ENDPOINT environment variables must be set in order for
# get_metget_data.py to succeed

targetScript="richamp_scale_and_subset_post_init.scr"
logfile=$1  # first parameter passed from richamp_scale_and_subset_post_init.sh
echo "\"start\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.start # <-OVERWRITE
echo "[$(date +'%Y-%h-%d-T%H:%M:%S%z')] The batch job for $targetScript has started." >> $logfile

rm -rf graphs properties wind_temp wave_temp
# load run.properties file into associative array and extract relevant properties
#declare -A properties
#RUNPROPERTIES=run.properties #PWD should be the SCENARIODIR
#SCRIPTDIR=`sed -n 's/[ ^]*$//;s/path.scriptdir\s*:\s*//p' $RUNPROPERTIES`
#source $SCRIPTDIR/properties.sh
#loadProperties $RUNPROPERTIES
#RSSSITE=${properties['forcing.tropicalcyclone.forecast.rsssite']} # Ditto
#FDIR=${properties['forcing.tropicalcyclone.forecast.path.fdir']} # Ditto
#ADVISDIR=${properties['asgs.path.advisdir']} # Ditto
#indir=/project/pi_iginis_uri_edu/pranav_sai_uri_edu/ecflow_output/ricv1/forecast_ensemble/forecast_base/ADCIRC/simulation
indir=$RICHAMP_INDIR
postprocessdir=$POSTHOME


python3 $postprocessdir/generateRunProperties.py --indir $indir
while read line; do 
	if [[ $line =~ "metgetstart" ]]; then
	  t_start=$line
	elif [[ $line =~ "metgetend" ]]; then
          t_end=$line
    fi
done < run.properties
echo "$t_start"
echo "$t_end"
start=${t_start:13:17}
end=${t_end:11:17}
echo "$start"
echo "$end"
# call MetGet again for precipitation
rain_filename=RICHAMP_rain
#metget build --domain gfs 0.1 -72 41 -71 43 --start "$start" --end "$end" --timestep 3600 --output $rain_filename --multiple-forecasts --format generic-netcdf --variable rain

wind_filename=gfs_wind
#metget build --domain gfs 0.1 -72 41 -71 43 --start "$start" --end "$end" --timestep 3600 --output $wind_filename --multiple-forecasts --format generic-netcdf --variable wind_pressure
wind_format="generic-netcdf"

# call python script to trim wind, interpolate to RICHAMP region of interest, and scale based on z0
output=RICHAMP_wind
highres_roughness=$postprocessdir/NLCD_z0_RICHAMP_Reg_Grid.nc
wind_roughness=$postprocessdir/gfs-roughness.nc
z0_interp_name=$postprocessdir/z0_interp
threads=3 # $threads + wasync = the number in the header after -c
sigma=1000
radius=3000
z0_sv=""
#z0_sv='-z0sv'
scale_logic=up-down
echo python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_back -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#if [ $wind_format == "owi-ascii" ]; then
   #python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_back -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#if [ $wind_format == "generic-netcdf" ]; then
   #python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_filename.nc -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#elif [ $wind_format == "wnd" ]; then
#   python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_param -wfmt $wind_format -winp $wind_inp -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#elif [ $wind_format == "blend" ]; then
#   python3 $postprocessdir/scale_and_subset.py -o $output -sl $scale_logic -hr $highres_roughness -w $wind_param -wfmt "wnd" -winp $wind_inp -wback $wind_back -wbackfmt "owi-ascii" -wbackr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
#fi

graphAdcirc=""
graphGfs=""
graphRain=""
graphPost=""
graphObs=""
graphWaves=""
#python3 $postprocessdir/generateWindGraphs.py --stations $WIND_STATIONS --wind $output.nc --obs $GRAPH_OBS_WIND
# Use this form of conditional to create call to generateGraphs script.
# python generateGraphs.py --stations OBS_STATIONS.json --adcircExists true --wind /data/RICV1_Unity_Dec15_fort.74.nc
if [[ $GRAPH_ADCIRC == "True" ]]; then
    graphAdcirc="--adcircExists true --wind $RICHAMP_INDIR/fort.74.nc"
fi
if [[ $GRAPH_GFS == "True" ]]; then
    graphGfs="--gfsExists true --wind $wind_filename.nc"
fi
if [[ $GRAPH_RAIN == "True" ]]; then
    graphRain="--rainExists true --rain $rain_filename.nc"
fi
if [[ $GRAPH_POST == "True" ]]; then
    graphPost="--postExists true --wind $output.nc"
fi
if [[ $GRAPH_OBS == "True" ]]; then
    graphObs="--obsExists true"
fi
if [[ $GRAPH_WAVES == "True" ]]; then
    graphWaves="--wavesExists true --waveswh $RICHAMP_INDIR/swan_HS.63.nc"
fi
echo python3 $postprocessdir/generateGraphs.py --stations $WIND_STATIONS $graphAdcirc $graphGfs $graphRain $graphPost $graphObs $graphWaves
python3 $postprocessdir/generateGraphs.py --stations $WIND_STATIONS $graphAdcirc $graphGfs $graphRain $graphPost $graphObs $graphWaves
# echo python3 $postprocessdir/generateGraphs.py --stations $WIND_STATIONS --wind $output.nc --rain $rain_filename.nc --obs $GRAPH_OBS_WIND
# python3 $postprocessdir/generateGraphs.py --stations $WIND_STATIONS --wind $output.nc --rain $rain_filename.nc --obs $GRAPH_OBS_WIND

# move files to a consistent location for dashboarding team 
wind_output=$output.nc
rain_output=$rain_filename.nc
output_dir=$RICHAMP_OUTDIR
cp $wind_output $rain_output $run_properties $output_dir
cp -r graphs properties $output_dir
cp $indir/*.trk $output_dir

echo "\"finish\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.finish # <-OVERWRITE
echo "[$(date +'%Y-%h-%d-T%H:%M:%S%z')] The batch job for $targetScript has finished." >> $logfile

